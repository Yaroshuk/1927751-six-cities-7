openapi: 3.1.0
info:
  title: API сервер для проекта «Шесть Городов».
  description: |-
    * Список ресурсов и маршрутов сервера «Шесть Городов».
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  version: 1.0.0
tags:
  - name: offers
    description: действия с объявлениями
  - name: comments
    description: действия с комментариями
  - name: users
    description: действия с пользователями

paths:
  /users/register:
    post:
      tags:
        - users
      summary: Регистрация пользователя
      description: Регистрирует нового пользователя

      requestBody:
        description: Информация для создания нового пользователя
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createUser'
        required: true

      responses:
        '201':
          description: Пользователь зарегистрирован. Объект пользователя
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'

        '409':
          description: Пользователь с таким email уже существует

  /users/login:
    post:
      tags:
        - users
      summary: Авторизация пользователя
      description: Авторизует пользователя на основе логина и пароля

      requestBody:
        description: Информация для авторизации юзера
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/authUser'
        required: true

      responses:
        '200':
          description: Пользователь авторизован.
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  refresh_token:
                    type: string

        '404':
          description: Пользователь с такими данными не найден

    get:
      tags:
        - users
      summary: Проверка состояния пользователя
      description: Возвращает информацию по авторизованному пользователю
      security:
        - bearerAuth: []

      responses:
        '200':
          description: Пользователь найден. Объект пользователя
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'

        '404':
          description: Пользователь с такими данными не найден

  /users/logout: ##//??: через пост или гет?
    post:
      tags:
        - users
      summary: Проверка состояния пользователя
      description: Возвращает информацию по авторизованному пользователю
      security:
        - bearerAuth: []

      responses:
        '200':
          description: Выход пользователя успешен

        '404':
          description: Пользователь с такими данными не найден

  /users/{userId}/avatar:
    post:
      tags:
        - users
      summary: Загрузить изображение аватара
      description: Загружает изображение аватара пользователя. Изображение
        аватара должно быть в формате `png` или `jpg`.

      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string

      requestBody:
        description: Путь до изображения
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/avatarPath'
        required: true

      responses:
        '201':
          description: Аватар пользователя установлен

        '404':
          description: Пользователь с таким id не найден

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    createUser:
      type: object

      required:
        - email
        - password
        - username

      properties:
        email:
          type: string
          example: keks@htmlacademy.ru

        username:
          type: string
          example: Keks

        password:
          type: string
          example: 123456

        avatarPath:
          type: string
          example: 'avatar.jpg'

        type:
          type: string
          example: обычный

    authUser:
      type: object

      required:
        - email
        - password

      properties:
        email:
          type: string
          example: keks@htmlacademy.ru

        password:
          type: string
          example: 123456

    user:
      type: object

      properties:
        id:
          type: string
          example: 6329c3d6a04ab1061c6425ea

        email:
          type: string
          example: keks@htmlacademy.ru

        username:
          type: string
          example: Keks

        avatarPath:
          type: string
          example: 'avatar.jpg'

        type:
          type: string
          example: обычный

    avatarPath:
      type: object

      properties:
        avatarPath:
          type: string
          example: 'avatar.jpg'
